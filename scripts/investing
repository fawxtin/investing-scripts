#!/usr/bin/env bash

script_name="$0"
script_basedir=$(dirname `which $0`)
indexes_file="${HOME}/.investing_com.indexes"
scrapy_folder="${HOME}/.local/share/investing.com/spiders/"

#
# Needs from apt:
#   + gridsite-clients
#
#

function usage
{
    echo -e "[Usage]:\n\talert {pair} set\n"
    echo -e "\t${script_name} alert pair set (over/under) price [message]"
    echo -e "\t${script_name} alert pair set around price step N_steps"
    echo -e "\t${script_name} alert pair set around price step N_steps-UP N_steps-DOWN\n"
    echo -e "\talert {pair} view\n"
    echo -e "\t${script_name} alert pair1,pair2,pair3 view\n"
    echo -e "\t${script_name} alert all view\n"
    echo -e "\tportfolio\n"
    echo -e "\t${script_name} portfolio panel"
    echo -e "\t${script_name} portfolio view\n"
}

function match_pair
{
    if [ ! -e "${indexes_file}" ]; then
	echo "[error] Hmm, could not find pairs indexes file: ${indexes_file}"
	exit 1
    fi
    
    pair=$(grep "${1}=" "${indexes_file}" | sed -e 's/'${1}'=\(.*\)/\1/')
    if [ -z "$pair" ]; then
	echo "[error] Oops, pair not found: '${1}'"
	usage
	exit 1
    fi
}

function match_pairs
{
    if [ ! -e "${indexes_file}" ]; then
	echo "[error] Hmm, could not find pairs indexes file: ${indexes_file}"
	exit 1
    fi

    pairs=""
    if [ "$1" == "all" ]; then
	pairs="all"
    else
	for i in $(echo "$1" | sed "s/,/ /g"); do
	    pair=$(grep "${i}=" "${indexes_file}" | sed -e 's/'${i}'=\(.*\)/\1/')
	    if [ -n "$pair" ]; then
		if [ -z "$pairs" ]; then
		    pairs="$pair"
		else
		    pairs="$pairs,$pair"
		fi
	    fi
	done
    fi
}

function match_action
{
    action="$1"
    if [ "$action" == "over" ] || [ "$action" == "under" ]; then
	true;
    else
	echo "[error] Unknown action: '${action}'"
	usage
	exit 1
    fi
}

function send_alert
{
    # $pair must be set
    # over/under price msg
    
    curl 'https://www.investing.com/useralerts/service/create' \
	 -H 'Connection: keep-alive' \
	 -H 'Accept: */*' \
	 -H 'X-Requested-With: XMLHttpRequest' \
	 -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36' \
	 -H 'Content-Type: application/x-www-form-urlencoded' \
	 -H 'Origin: https://www.investing.com' \
	 -H 'Sec-Fetch-Site: same-origin' \
	 -H 'Sec-Fetch-Mode: cors' \
	 -H 'Sec-Fetch-Dest: empty' \
	 -H 'Referer: https://www.investing.com/members-admin/alert-center' \
	 -H 'Accept-Language: en-US,en;q=0.9,pt;q=0.8' \
	 -H "Cookie: ses_id=${INVESTING_COM_TOKEN}" \
	 --data-raw "alertType=instrument&alertParams%5Bpair_ID%5D=${pair}&alertParams%5Bvalue%5D=${2}&alertParams%5Balert_trigger%5D=price&alertParams%5Bfrequency%5D=Once&alertParams%5Bthreshold%5D=${1}&alertParams%5Bplatform%5D=desktop&alertParams%5Bemail_alert%5D=No&alertParams%5BpreReminderText%5D=${3}" \
	 --compressed

    echo ""
}

function generate_alert_around
{
    a_price="$1"
    a_step="$2"

    n_steps_up="$3"
    n_steps_down="$4"

    if [ -z "$n_steps_down" ]; then
	n_steps_down="$3"
    fi

    echo -e "[debug] Generating alert with base price as ${a_price} with ${a_step}:\n\tUP <- ${n_steps_up}\n\tDOWN <- ${n_steps_down}\n"

    for i in $(seq 1 "$n_steps_up"); do
	c_price=$(echo "${a_price} + (${a_step} * ${i})" | bc)
	echo "[debug] Sending alert for price over ${c_price}"
	send_alert "over" "$c_price"
    done

    for i in $(seq 1 "$n_steps_down"); do
	c_price=$(echo "${a_price} - (${a_step} * ${i})" | bc)
	echo "[debug] Sending alert for price under ${c_price}"
	send_alert "under" "$c_price"
    done

}

function alerts_cmd
{
    alert_cmd="${1}"

    case "${alert_cmd}" in
	"view" )
	    view_alerts "$pairs"
	    ;;
	"set" )
	    set_alerts "$2" "$3" "$4" "$5" "$6"
	    ;;
	* )
	    echo "[error] Unknown alert set action: ${alert_cmd}"
	    usage
	    ;;
    esac
}

function set_alerts
{
    case "${1}" in
	"over" )
	    msg=$(urlencode "$3");
	    price=$(urlencode $2)
	    send_alert "$1" "$price" "$msg";
	    ;;
	"under" )
	    msg=$(urlencode "$3");
	    price=$(urlencode $2)
	    send_alert "$1" "$price" "$msg";
	    ;;
	"around" )
	    price=$(urlencode $2)
	    generate_alert_around "$price" "$3" "${4:-2}" "$5";
	    ;;
	* )
	    echo "[error] Unknown alert set action: '${1}'"
	    usage
	    exit 1
	    ;;
    esac
}

function view_alerts
{
    tmp_output_dir="${HOME}/.local/share/investing.com/logs/"
    tmp_output_jsonfile="${tmp_output_dir}/investing.com_alerts_`date +%s`.json"
    mkdir -p "${tmp_output_dir}"

    pairs="$1"
    scrapy runspider "${scrapy_folder}/investing-spider-alert-list.py" -o "${tmp_output_jsonfile}" --nolog
    python3 "${script_basedir}/investing-alert-view.py" "${tmp_output_jsonfile}" "$pairs"
}


function view_portfolio
{
    tmp_output_dir="${HOME}/.local/share/investing.com/logs/"
    tmp_output_jsonfile="${tmp_output_dir}/investing.com_portfolio_`date +%s`.json"
    mkdir -p "${tmp_output_dir}"

    scrapy runspider "${scrapy_folder}/investing-spider-portfolio-list.py" -o "${tmp_output_jsonfile}" --nolog
    if [ "$1" == "panel" ]; then
	python3 "${script_basedir}/investing-portfolio-panel.py" "${tmp_output_jsonfile}"
    else
	python3 "${script_basedir}/investing-portfolio-view.py" "${tmp_output_jsonfile}"
    fi
}
###
### Main stuff
###

## Check variables

if [ -z "INVESTING_COM_TOKEN" ]; then
    echo "[error] Missing investing.com token at \$INVESTING_COM_TOKEN"
    usage
    exit 1
fi

action="$1"
shift

case "${action}" in
    "alert" )
	pairs_cl="$1"
	match_pairs "$1"
	shift

	alerts_cmd $*
	;;
    "portfolio" )
	view_portfolio "$1"
	;;
    * )
	echo "[error] Unknown action: '${action}'"
	usage
	exit 1
	;;
esac

